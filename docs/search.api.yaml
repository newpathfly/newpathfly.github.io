openapi: 3.0.3
info:
  title: Flight Search API
  version: 2.1.0
  description: This API is intended for backend integration only. It is not designed for calling from a frontend directly.
  contact:
    name: newpathfly
servers:
  - url: http://localhost:8080
tags:
  - name: Search
  - name: Poll
paths:
  /searches:
    post:
      summary: Call this endpoint to create a search request.
      description: TODO
      operationId: createSearch
      tags:
        - Search
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchRequestSuccessful"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchRequestFailed"

  /polls:
    post:
      operationId: createPoll
      tags:
        - Poll
      description: Call this endpoint to poll for search results.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchResultPoll"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResult"

components:
  schemas:
    # Search Request
    SearchRequest:
      description: TODO
      required:
        - queries
        - adultAmount
      properties:
        queries:
          description: This is a list containing the same number of queries as the number of flights for the trip. For one-way trip there should be one query, whereas for round trip there should be two queries.
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Query"
        type:
          $ref: "#/components/schemas/TripType"
        adultAmount:
          description: This is the number of adult passengers
          type: integer
          minimum: 1
        childAmount:
          description: This is the number of child passengers
          type: integer
          minimum: 0
        infantAmount:
          description: This is the number of infant passengers
          type: integer
          minimum: 0
        fareClass:
          $ref: "#/components/schemas/FareClass"

    SearchRequestSuccessful:
      description: TODO
      properties:
        resultCode:
          type: integer
          default: 200
        requestId:
          description: This is the request ID to be included in polling later on.
          type: string
          example: "OW|Economy|1-0-0|UnlimitedStarter-UnlimitedCandidate|20210901:@YTO:@AMS"

    SearchRequestFailed:
      description: TODO
      properties:
        resultCode:
          description: TODO
          type: integer
          default: 400
        message:
          description: TODO
          type: string
          example: "Broken search request"

    # Poll
    SearchResultPoll:
      description: TODO
      required:
        - requestId
      properties:
        requestId:
          description: This is the request ID for which to be polled.
          type: string
          example: "OW|Economy|1-0-0|UnlimitedStarter-UnlimitedCandidate|20210901:@YTO:@AMS"
        offset:
          description: TODO
          type: integer
          minimum: 0
          example: 100
        size:
          description: TODO
          minimum: 1
          maximum: 100
          example: 10

    SearchResult:
      description: TODO
      properties:
        resultCode:
          description: TODO
          type: integer
          example: 200
        message:
          description: TODO
          type: string
          example: Any error message goes here.
        currencyCode:
          description: This is the 3-letter currency code in which price is provided.
          type: string
          minLength: 3
          maxLength: 3
          example: EUR
        trips:
          description: This is a list of trips based on `queries` and `TripType` in the corresponding `SearchRequest`.
          type: array
          items:
            $ref: "#/components/schemas/Trip"

    # Domain Models
    Query:
      description: This is a flight query from departure airport to arrival airport on specific departure date. This query corresponding to a single flight in a trip, where a one-way trip contains only one flight and a round trip contains two flights.
      required:
        - depAirport
        - arrAirport
        - date
      properties:
        depAirport:
          description: This is the departure airport specified using its IATA code.
          type: string
          minLength: 3
          maxLength: 3
          example: LON
        arrAirport:
          description: This is the arrival airport specified using its IATA code.
          type: string
          minLength: 3
          maxLength: 3
          example: CGN
        date:
          description: This is the departure date in `YYYYMMDD` format
          type: string
          pattern: '^\d{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$'
          example: "20210401"

    Trip:
      description: A trip is one complete travel. It can be one-way trip or a round trip, depending on the number of included flights.
      properties:
        flights:
          description: A one-way trip consists of one flight. A round-trip consists of two flights going forth and back between two places.
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Flight"
        prices:
          description: TODO
          properties:
            ADT:
              $ref: "#/components/schemas/Price"
            CHD:
              $ref: "#/components/schemas/Price"
            INF:
              $ref: "#/components/schemas/Price"
            ALL:
              $ref: "#/components/schemas/Price"

    Flight:
      description: TODO
      properties:
        segments:
          description: TODO
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Segment"

    Segment:
      description: TODO
      properties:
        fareClass:
          $ref: "#/components/schemas/FareClass"
        depDate:
          description: This is the departure date in `YYYYMMDD` format.
          type: string
          pattern: '^\d{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$'
          example: "20210401"
        depTime:
          description: This is the departure time in `HH:mm` format.
          type: string
          pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
          example: "12:45"
        depAirport:
          description: This is the departure airport specified using its IATA code.
          type: string
          minLength: 3
          maxLength: 3
          example: LON
        arrDate:
          description: This is the arrival date in `YYYYMMDD` format.
          type: string
          pattern: '^\d{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$'
          example: "20210401"
        arrTime:
          description: This is the arrival time in `HH:mm` format.
          type: string
          pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
          example: "17:50"
        arrAirport:
          description: This is the arrival airport specified using its IATA code.
          type: string
          minLength: 3
          maxLength: 3
          example: CGN
        flightNo:
          description: This is the flight number starting with carrier IATA code.
          type: string
          example: AC103
        carrier:
          description: This is the 2-letter IATA carrier code
          type: string
          minLength: 2
          maxLength: 2
          example: AC

    Price:
      description: TODO
      properties:
        price:
          description: TODO
          type: number
          format: double
          minimum: 0
          example: 123.45
        tax:
          description: TODO
          type: number
          format: double
          minimum: 0
          example: 6.78
        totalPrice:
          description: TODO
          type: number
          format: double
          minimum: 0
          example: 130.23
        seatsStatus:
          $ref: "#/components/schemas/SeatStatus"
        currencyCode:
          description: This is the 3-letter currency code in which price is provided.
          type: string
          minLength: 3
          maxLength: 3
          example: EUR

    # Enums
    SeatStatus:
      description: Seat status is `EMPTY` when there is no seat. Else, it is `LIMITED` when there are less than 8 seats. Else, it is `ENOUGH`.
      type: string
      enum:
        - EMPTY
        - ENOUGH
        - LIMITED
      example: ENOUGH

    FareClass:
      description: This is the fare class, which is one of `Economy`, `PremiumEconomy`, `Business`, `First` and `All`, where `All` means query for all fare classes.
      type: string
      default: Economy
      enum:
        - Economy
        - PremiumEconomy
        - Business
        - First
        - All
    TripType:
      description: This is the trip type, where `OW` is for one-way trip and `RT` is for round trip.
      type: string
      default: OW
      enum:
        - OW
        - RT
